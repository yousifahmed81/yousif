@page "/barber"
@rendermode InteractiveServer
@inject IDialogService DialogService
@using ClassLibrary.domian
@using Library.ServicesInterfaces


<h3>Barber</h3>

<div style="float:inline-end">
    <FluentButton Appearance="Appearance.Accent" @onclick="ShowAddModal">Add New Barber</FluentButton>
</div>

<br />

@if (barbers == null)
{
    <span>Loading...</span>
}

else
{
    <FluentDataGrid Items="@barbers" 
        GenerateHeader="GenerateHeaderOption.Sticky" 
        ResizableColumns=true 
        Pagination="@pagination" 
        Style="width: 100%; height: 405px;overflow:auto;"/>

    <FluentDataGrid Items="@barbers" PaginationState="@pagination">       
        <PropertyColumn Property="@(p=>p.name)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Phone)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Email)" Sortable="true" />
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => OpenDialogAsync(context))" />
            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteBarber(context))" />
        </TemplateColumn>
    </FluentDataGrid>
        <FluentPaginator State="@pagination"/>
}
    @code {
    [Inject] IBarberService BarberService { get; set; }
    private IQueryable<Barber> barbers;
    private AddEditBarberDialog addEditBarberDialog;
        PaginationState pagination = new PaginationState { ItemsPerPage = 9 };

    protected override async Task OnInitializedAsync()
    {
        await LoadBarbers();
    }

        private async Task LoadBarbers()
        {
            barbers = (await BarberService.GetAll()).AsQueryable();
            StateHasChanged();
        }

    private async Task OpenDialogAsync(Barber barber)
    {
        DialogParameters parameters = new DialogParameters()
            {
                Title = ((barber.id == 0) ? "Add Barber" : "Edit Barber"),
                PrimaryAction = "Yes",
                PrimaryActionEnabled = false,
                SecondaryAction = "No",
                Width = "800px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };
        var dialog = await DialogService.ShowDialogAsync<AddEditBarberDialog>(barber, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled && result.Data != null)
        {
            await LoadBarbers();
        }
    }

    private async Task ShowAddModal()
    {
        await OpenDialogAsync(new Barber());
    }

    private async void DeleteBarber(Barber barber)
    {
        await BarberService.Delete(barber);
        await LoadBarbers();
    }

    private async void RefreshList()
    {
        await LoadBarbers();
    }
}